#!/usr/bin/env ruby
require "optionparser"
require "active_support"
require "active_support/all"

@simulate = false
@issue_number = nil

def error(title)
  STDERR.puts title
  exit 1
end

def confirm(title)
  printf "#{title}\npress 'y' to continue: "
  prompt = STDIN.gets.chomp
  prompt == 'y'
end

def sh(command)
  return puts "▶️  #{command}" if @simulate

  error "could not execute '#{command}'" unless system(command)
end

def sh_get(command)
  value = `#{command}`
  error "could not execute '#{command}'" unless $? == 0

  value.strip
end

def current_branch
  sh_get "git rev-parse --abbrev-ref HEAD"
end

def issue_json
  @issue_json ||= begin
    error "can't get issue information from GitHub unless the '-i' options is used" unless @issue_number.present?
    JSON.parse(sh_get("gh issue view #{@issue_number} --json title"))
  end
end

OptionParser.new do |opts|
  opts.banner = "Usage: pr [options] [title]\nDefaults: pr" + File::SEPARATOR
  opts.on("-s", "--simulate", "Simulate the actions: prints out the write-commands instead of executing them, prefixed with ▶️ .") do
    @simulate = true
  end
  opts.on("-i", "--issue ISSUE_NUMBER", Integer, "Create a pull-request fixing an issue with the provided number.") do |i|
    @issue_number = i
  end
end.parse!

name = @issue_number ? issue_json["title"] : ARGV.join(" ")
error "Please specify a title for your Pull Request" if name.blank?

branch = "feature/"
branch += "#{@issue_number}_" if @issue_number
branch += name.parameterize.underscore

title = name

body_lines = []
path = ".github/pull_request_template.md"
body_lines.push File.read(path) if File.exist?(path)
body_lines.push "fixes ##{@issue_number}" if @issue_number

base_branch = current_branch
exit 1 unless ["master", "main", "develop"].include?(base_branch) || confirm("Your base branch #{base_branch} doesn't seem to be a common base branch name. Do you want to continue?")

puts "Creating new PR for feature '#{title}'"

puts "Creating branch #{branch}"
sh "git checkout -b #{branch}"

puts "Creating empty commit"
commit_message = "initial commit for #{title}"
commit_message += ", fixes ##{@issue_number}" if @issue_number
sh "git commit -m #{commit_message} --allow-empty"

puts "Pushing to origin"
sh "git push -u origin #{branch}"

puts "Creating pull request"

escaped_title = title.gsub("'", "\\\\'")
escaped_body = body_lines.join("\n").gsub("'", "\\\\'")

ENV["PR_BODY"] = escaped_body

sh "gh pr create --draft --title \"#{escaped_title}\" --body \"$PR_BODY\" --base #{base_branch}"
